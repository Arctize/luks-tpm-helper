#!/usr/bin/env bash
set -euo pipefail

warn() { printf "Warning: %s\n" "$1" >&2; }
err() { printf "Error: %s\n" "$1" >&2 && exit 1; }

# Try to check if Secure Boot is enabled and warn in case it isn't
if command -v mokutil &>/dev/null; then
  if mokutil --sb-state | grep -q -v "SecureBoot enabled"; then
    warn "Secure Boot is not enabled"
  fi
else
  warn "mokutil not found, could not check Secure Boot status"
fi

mapfile -t luksdisks < <(lsblk -p --json | jq -r 'path(.. | select(.=="crypt")) as $p | getpath($p[:-3]) | .name')

ask() {
  while :; do
    prompt="  Automatically decrypt using the TPM? [Y/n]"
    read -rp "${prompt}" choice
    case "${choice}" in
    y | Y | "") return 0 ;;
    n | N) return 1 ;;
    *) echo "  Invalid answer: ${choice}" ;;
    esac
  done
}

# Use systemd-cryptenroll if available
if command -v systemd-cryptenroll &>/dev/null; then
  for disk in "${luksdisks[@]}"; do
    echo "Found encrypted disk: ${disk}"
    if ask; then
      echo "  Running systemd-cryptenroll..."
      sudo systemd-cryptenroll "${disk}" --tpm2-device=auto --wipe-slot=tpm2
    fi
  done
# Alternatively use clevis
elif command -v clevis &>/dev/null; then
  # Find out which PCR bank is used, clevis supports sha1 and sha256
  pcr_bank=$(sudo tpm2_pcrread | awk '$1=="0" {print substr(p, 1, length(p)-1); exit} {p=$1}')
  if [[ "${pcr_bank}" != @(sha1|sha256) ]]; then
    err "No supported pcr_bank found"
  fi
  for disk in "${luksdisks[@]}"; do
    echo "Found encrypted disk: ${disk}"
    if ask; then
      echo "  Running clevis luks bind..."
      sudo clevis luks bind -d "${disk}" tpm2 "{\"pcr_bank\":\"${pcr_bank}\",\"pcr_ids\":\"7\"}"
    fi
  done
else
  err "Found neither systemd-cryptenroll nor clevis"
fi
